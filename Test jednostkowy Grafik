import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class GrafikLekarzyTest {

    private GrafikRepository repository;
    private GrafikService service;

    @BeforeEach
    public void setUp() {
        // Przygotowanie repozytorium i serwisu przed każdym testem
        repository = new GrafikRepository();
        service = new GrafikService(repository);
    }

    // Test dodawania grafiku
    @Test
    public void testDodajGrafik() {
        // Dodajemy grafik lekarza
        service.dodajGrafik("L001", LocalDate.of(2024, 12, 4), "08:00", "16:00");
        
        // Sprawdzamy, czy grafik został dodany
        List<GrafikLekarza> grafiki = repository.getWszystkieGrafiki();
        assertEquals(1, grafiki.size(), "Powinien być tylko jeden grafik");
        assertEquals("L001", grafiki.get(0).getIdLekarza(), "Id lekarza powinno być L001");
        assertEquals(LocalDate.of(2024, 12, 4), grafiki.get(0).getData(), "Data powinna być 2024-12-04");
    }

    // Test pobierania grafików lekarza na tydzień
    @Test
    public void testPobierzGrafikiNaTydzien() {
        // Dodajemy kilka grafików
        service.dodajGrafik("L001", LocalDate.of(2024, 12, 4), "08:00", "16:00");
        service.dodajGrafik("L001", LocalDate.of(2024, 12, 5), "10:00", "18:00");
        service.dodajGrafik("L001", LocalDate.of(2024, 12, 8), "07:00", "14:00");
        service.dodajGrafik("L001", LocalDate.of(2024, 12, 9), "08:00", "16:00");

        // Pobieramy grafiki dla lekarza L001 na tydzień zaczynający się 2024-12-03
        List<GrafikLekarza> grafikiNaTydzien = service.pobierzGrafikiLekarzaNaTydzien("L001", LocalDate.of(2024, 12, 3));

        // Sprawdzamy, czy grafiki zostały poprawnie pobrane
        assertEquals(4, grafikiNaTydzien.size(), "Powinny zostać pobrane 4 grafiki");
        assertEquals("L001", grafikiNaTydzien.get(0).getIdLekarza(), "Id lekarza powinno być L001");
        assertTrue(grafikiNaTydzien.stream().anyMatch(g -> g.getData().equals(LocalDate.of(2024, 12, 4))),
                "Powinna być data 2024-12-04 w grafiku");
        assertTrue(grafikiNaTydzien.stream().anyMatch(g -> g.getData().equals(LocalDate.of(2024, 12, 8))),
                "Powinna być data 2024-12-08 w grafiku");
    }

    // Test sprawdzający brak grafików dla lekarza w danym tygodniu
    @Test
    public void testBrakGrafikowNaTydzien() {
        // Dodajemy grafik tylko na 2024-12-04
        service.dodajGrafik("L001", LocalDate.of(2024, 12, 4), "08:00", "16:00");

        // Pobieramy grafiki dla lekarza L001 na tydzień, który nie zawiera 2024-12-04
        List<GrafikLekarza> grafikiNaTydzien = service.pobierzGrafikiLekarzaNaTydzien("L001", LocalDate.of(2024, 12, 1));

        // Sprawdzamy, czy nie ma grafików w tym tygodniu
        assertTrue(grafikiNaTydzien.isEmpty(), "Nie powinno być grafików w tym tygodniu");
    }
}
