class DoctorManager {
    // Mapa przechowująca lekarzy na podstawie ich unikalnego ID
    private final Map<String, Doctor> doctorsById = new HashMap<>();

    // Mapa przechowująca grafiki pracy lekarzy.
    // Klucz: ID lekarza, Wartość: Mapa, w której klucz to data, a wartość to lista godzin pracy.
    private final Map<String, Map<LocalDate, List<LocalTime>>> schedules = new HashMap<>();

    // Metoda dodająca lekarza do systemu
    public void addDoctor(Doctor doctor) {
        // Dodajemy lekarza do mapy doctorsById
        doctorsById.put(doctor.getId(), doctor);
        // Inicjalizujemy pusty grafik pracy dla nowo dodanego lekarza
        schedules.put(doctor.getId(), new HashMap<>());
    }

    // Metoda tworząca grafik pracy lekarza na określony dzień
    public void createScheduleForDoctor(String doctorId, LocalDate date, List<LocalTime> workingHours) {
        // Pobranie istniejącego grafiku lekarza na podstawie jego ID
        Map<LocalDate, List<LocalTime>> doctorSchedule = schedules.get(doctorId);
        if (doctorSchedule == null) {
            System.out.println("Doctor with ID " + doctorId + " does not exist.");
            return;
        }

        // Dodanie godzin pracy dla określonej daty
        doctorSchedule.put(date, workingHours);
    }

    // Metoda wyświetlająca grafik lekarza na najbliższy tydzień
    public void displayWeeklyScheduleForDoctor(String doctorId) {
        // Określenie dzisiejszej daty i daty końca tygodnia
        LocalDate today = LocalDate.now();
        LocalDate endOfWeek = today.plusDays(7);

        // Pobranie grafiku lekarza na podstawie jego ID
        Map<LocalDate, List<LocalTime>> doctorSchedule = schedules.get(doctorId);

        // Sprawdzenie, czy grafik istnieje dla danego lekarza
        if (doctorSchedule == null) {
            System.out.println("No schedule found for doctor with ID: " + doctorId);
            return;
        }

        System.out.println("Displaying schedule for Doctor ID: " + doctorId);

        // Iteracja przez kolejne dni tygodnia i wyświetlenie godzin pracy, jeśli istnieją
        for (LocalDate date = today; !date.isAfter(endOfWeek); date = date.plusDays(1)) {
            List<LocalTime> workingHours = doctorSchedule.get(date);
            if (workingHours != null) {
                // Formatowanie daty i wyświetlenie godzin pracy
                System.out.println("Date: " + date.format(DateTimeFormatter.ofPattern("yyyy-MM-dd")) +
                        ", Hours: " + workingHours);
            } else {
                // Jeśli brak godzin pracy dla danej daty
                System.out.println("Date: " + date.format(DateTimeFormatter.ofPattern("yyyy-MM-dd")) +
                        ", No working hours.");
            }
        }
    }
}


//  Interfejs użytkownika w MainApp

case 8:
    // Tworzenie grafiku dla lekarza
    System.out.print("Enter doctor ID to create schedule: ");
    String scheduleDoctorId = sc.nextLine(); // Pobranie ID lekarza

    System.out.print("Enter date for schedule (YYYY-MM-DD): ");
    LocalDate scheduleDate = LocalDate.parse(sc.nextLine()); // Pobranie daty grafiku

    System.out.print("Enter working hours (comma separated, e.g., 09:00, 10:00): ");
    String hoursInput = sc.nextLine(); // Pobranie godzin pracy jako tekst
    List<LocalTime> workingHours = new ArrayList<>();

    // Parsowanie godzin pracy i dodanie ich do listy
    for (String hour : hoursInput.split(",")) {
        workingHours.add(LocalTime.parse(hour.trim())); // Usuwamy zbędne spacje i konwertujemy na LocalTime
    }

    // Wywołanie metody tworzącej grafik w `DoctorManager`
    doctorManager.createScheduleForDoctor(scheduleDoctorId, scheduleDate, workingHours);
    System.out.println("Schedule created successfully!");
    break;

case 9:
    // Wyświetlanie grafiku dla lekarza
    System.out.print("Enter doctor ID to view schedule: ");
    String viewDoctorId = sc.nextLine(); // Pobranie ID lekarza

    // Wywołanie metody wyświetlającej grafik w `DoctorManager`
    doctorManager.displayWeeklyScheduleForDoctor(viewDoctorId);
    break;

